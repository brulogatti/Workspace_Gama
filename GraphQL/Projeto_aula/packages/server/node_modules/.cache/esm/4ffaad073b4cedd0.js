let gql,createRepository,ListSortmentEnum;_3b4‍.x([["typeDefs",()=>typeDefs],["resolvers",()=>resolvers]]);_3b4‍.w("apollo-server-express",[["gql",["gql"],function(v){gql=v}]]);_3b4‍.w("../../io/Database/createRepository",[["default",["createRepository"],function(v){createRepository=v}]]);_3b4‍.w("../List/List",[["ListSortmentEnum",["ListSortmentEnum"],function(v){ListSortmentEnum=v}]]);



const clientRepository = createRepository('client');

       const typeDefs = gql`
    type Client implements Node{
        id: ID!
        name: String!
        email: String!
        disabled: Boolean!
    }

    type ClientList implements List{
        items: [Client!]!
        totalItems: Int!
    }

    input ClientListFilter{
        
    }

    input ClientListOptions{
        take: Int
        skip: Int
        filter: ClientListFilter
        sort: ListSort
    }

    extend type Query{
        client(id:ID!): Client
        clients(options: ClientListOptions): ClientList
    }

`;

       const resolvers={
    Query: {
        client: async ( _, {id}) => {
            const clients = await clientRepository.read();
            return clients.find((client) => client.id === id );
        },
        clients: async ( _, args ) => {
            const {
                skip=0,
                take=10,
                sort
            } = args.options || {};

            const clients = await clientRepository.read();

            if(sort){
                clients.sort((clientA, clientB) => {
                    if(!['name', 'email', 'disabled'].includes(sort.sorter))
                        throw new Error(`Cannot sort by field: ${sort.sorter}`)

                    const fieldA = clientA[sort.sorter];
                    const fieldB = clientB[sort.sorter];
                    if(typeof fieldA==='string') { 
                        if(sort.sortment===ListSortmentEnum.ASC){
                            return fieldA.localeCompare(fieldB);
                        } else{
                            return fieldB.localeCompare(fieldA);
                        }
                    }

                    
                    if(sort.sortment===ListSortmentEnum.ASC){
                        return Number(fieldA) - Number(fieldB);
                    } else{
                        return Number(fieldB) - Number(fieldA);
                    }
                    

                })
            }

            return {
                items: clients.slice(skip, skip + take),
                totalItems: clients.length,
            };
        },
    },
};

