let express,ApolloServer,gql,typeDefs,resolvers;_13c‍.w("express",[["default",["express"],function(v){express=v}]]);_13c‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}],["gql",["gql"],function(v){gql=v}]]);_13c‍.w("./graphql/typeDefs",[["default",["typeDefs"],function(v){typeDefs=v}]]);_13c‍.w("./graphql/resolvers",[["default",["resolvers"],function(v){resolvers=v}]]);




const app = express();

const server = new ApolloServer({
    typeDefs,
    resolvers,
});

server.applyMiddleware({
    app,
    cors: {
        origin:'http://localhost:3000',
    },
    bodyParserConfig: true,
});

// server.get('/status', (_, response) => {
//     response.send({
//         status: "OK",
//     });
// }
// ); 

// const enableCors = cors({origin: 'http://localhost:3000'});

// server
// .options('/authenticate', enableCors)
// .post('/authenticate', enableCors, express.json(), (request, response) => {
//     console.log(
//         'E-mail', request.body.email,
//         'Senha', request.body.password
//     );
//     response.send({
//         Okay: true,
//     }
//     )
// });


const PORT = process.env.PORT ? parseInt(process.env.PORT) : 8000;
const HOSTNAME = process.env.HOSTNAME || '127.0.0.1'; 

app.listen(PORT, HOSTNAME, () => {
    console.log(`Server is listening at http://${HOSTNAME}:${PORT}`);
});